/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface MeasurementControllerGetRequest {
    session: string;
    id?: string;
    timestamp?: number;
    forward?: boolean;
}

/**
 * 
 */
export class MeasurementApi extends runtime.BaseAPI {

    /**
     * Return a list of users
     */
    async measurementControllerGetRaw(requestParameters: MeasurementControllerGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.session === null || requestParameters.session === undefined) {
            throw new runtime.RequiredError('session','Required parameter requestParameters.session was null or undefined when calling measurementControllerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.forward !== undefined) {
            queryParameters['forward'] = requestParameters.forward;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement/{session}`.replace(`{${"session"}}`, encodeURIComponent(String(requestParameters.session))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Return a list of users
     */
    async measurementControllerGet(requestParameters: MeasurementControllerGetRequest): Promise<void> {
        await this.measurementControllerGetRaw(requestParameters);
    }

}
