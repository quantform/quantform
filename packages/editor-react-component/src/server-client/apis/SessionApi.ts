/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface SessionControllerBacktestRequest {
    id: string;
}

export interface SessionControllerUniverseRequest {
    id: string;
}

/**
 * 
 */
export class SessionApi extends runtime.BaseAPI {

    /**
     * Backtest
     */
    async sessionControllerBacktestRaw(requestParameters: SessionControllerBacktestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionControllerBacktest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{id}/backtest`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Backtest
     */
    async sessionControllerBacktest(requestParameters: SessionControllerBacktestRequest): Promise<void> {
        await this.sessionControllerBacktestRaw(requestParameters);
    }

    /**
     * Universe
     */
    async sessionControllerUniverseRaw(requestParameters: SessionControllerUniverseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionControllerUniverse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{id}/universe`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Universe
     */
    async sessionControllerUniverse(requestParameters: SessionControllerUniverseRequest): Promise<void> {
        await this.sessionControllerUniverseRaw(requestParameters);
    }

}
