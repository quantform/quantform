/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DescriptorIndexResponse,
    DescriptorIndexResponseFromJSON,
    DescriptorIndexResponseToJSON,
    DescriptorTemplateResponse,
    DescriptorTemplateResponseFromJSON,
    DescriptorTemplateResponseToJSON,
} from '../models';

export interface DescriptorControllerTemplateRequest {
    name: string;
}

/**
 * 
 */
export class DescriptorApi extends runtime.BaseAPI {

    /**
     * Index
     */
    async descriptorControllerIndexRaw(): Promise<runtime.ApiResponse<DescriptorIndexResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/descriptor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DescriptorIndexResponseFromJSON(jsonValue));
    }

    /**
     * Index
     */
    async descriptorControllerIndex(): Promise<DescriptorIndexResponse> {
        const response = await this.descriptorControllerIndexRaw();
        return await response.value();
    }

    /**
     * Template
     */
    async descriptorControllerTemplateRaw(requestParameters: DescriptorControllerTemplateRequest): Promise<runtime.ApiResponse<DescriptorTemplateResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling descriptorControllerTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/descriptor/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DescriptorTemplateResponseFromJSON(jsonValue));
    }

    /**
     * Template
     */
    async descriptorControllerTemplate(requestParameters: DescriptorControllerTemplateRequest): Promise<DescriptorTemplateResponse> {
        const response = await this.descriptorControllerTemplateRaw(requestParameters);
        return await response.value();
    }

}
