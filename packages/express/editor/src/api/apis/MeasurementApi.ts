/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface MeasurementControllerGetRequest {
    name: string;
    session: number;
    timestamp: number;
    forward: boolean;
}

export interface MeasurementControllerIndexRequest {
    name: string;
}

/**
 * 
 */
export class MeasurementApi extends runtime.BaseAPI {

    /**
     * Get
     */
    async measurementControllerGetRaw(requestParameters: MeasurementControllerGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling measurementControllerGet.');
        }

        if (requestParameters.session === null || requestParameters.session === undefined) {
            throw new runtime.RequiredError('session','Required parameter requestParameters.session was null or undefined when calling measurementControllerGet.');
        }

        if (requestParameters.timestamp === null || requestParameters.timestamp === undefined) {
            throw new runtime.RequiredError('timestamp','Required parameter requestParameters.timestamp was null or undefined when calling measurementControllerGet.');
        }

        if (requestParameters.forward === null || requestParameters.forward === undefined) {
            throw new runtime.RequiredError('forward','Required parameter requestParameters.forward was null or undefined when calling measurementControllerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.session !== undefined) {
            queryParameters['session'] = requestParameters.session;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.forward !== undefined) {
            queryParameters['forward'] = requestParameters.forward;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get
     */
    async measurementControllerGet(requestParameters: MeasurementControllerGetRequest): Promise<void> {
        await this.measurementControllerGetRaw(requestParameters);
    }

    /**
     * Index
     */
    async measurementControllerIndexRaw(requestParameters: MeasurementControllerIndexRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling measurementControllerIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement/{name}/index`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Index
     */
    async measurementControllerIndex(requestParameters: MeasurementControllerIndexRequest): Promise<void> {
        await this.measurementControllerIndexRaw(requestParameters);
    }

}
